name: Run Tests

on:
  workflow_dispatch:
  pull_request:
    types: [ opened, synchronize ]
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-12
    steps:
    - name: Checkout project
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup Xcode version
      uses: maxim-lobanov/setup-xcode@v1.4.1
      with:
        xcode-version: latest-stable

    - name: Restore Cocoapods cache
      uses: actions/cache@v2
      id: cache
      with:
        path: Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    - name: Cocoapods
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: pod install --verbose --repo-update
      
      # Sonar coverage is broken up into two formats for Objective-C and Swift code. 
      # All Objective-C analysis requires the build-wrapper (https://docs.sonarqube.org/latest/analysis/languages/cfamily/). Without it, sonar-scanner
      # will fail. Some documentation suggests it's not necessary to use the build-wrapper, however this appears to have been changed in 2019 or so.
      # We also use the sonarqube-generic-converage for Swift code, which is a generic format Sonar understands. We have to convert from xcov format
      # to accomplish this.
    - name: Test
      run: |
        .github/scripts/build-wrapper-macosx-x86/build-wrapper-macosx-x86 --out-dir build_wrapper_output_directory xcodebuild clean test -quiet -workspace Airwallex.xcworkspace -scheme Examples -testPlan Airwallex -destination 'platform=iOS Simulator,name=iPhone 13' -resultBundlePath airwallex.xcresult
    
    - name: Create code coverage report
      # Convert xcov coverage format. See https://github.com/SonarSource/sonar-scanning-examples/tree/master/swift-coverage
      run: |
        brew install chargepoint/xcparse/xcparse

        xcparse codecov airwallex.xcresult
        .github/scripts/xccov-to-sonarqube-generic.sh action.xccovarchive > sonarqube-generic-coverage.xml

    - name: Setup sonarqube
      uses: warchant/setup-sonar-scanner@v3
      with:
        version: 4.7.0.2747

    - name: SonarQube Scan with Pull Request Decoration
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: sonar-scanner -Dsonar.qualitygate.wait=true
